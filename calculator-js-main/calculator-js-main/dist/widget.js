!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",function(){return show});var _calculator_html__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),_calculator_html__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(_calculator_html__WEBPACK_IMPORTED_MODULE_0__),_calculator_css__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(4),_calculator_css__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(_calculator_css__WEBPACK_IMPORTED_MODULE_1__),textBox="",currentNumber="";String.prototype.replaceAt=function(e,t){let n=0==t.length?1:t.length;return this.substr(0,e-1)+t+this.substr(e-1+n,this.length)},String.prototype.isEmpty=function(){return null==this||void 0===this||(null==this.trim()||""===this.trim())};const map={DIV:"/",PLUS:"+",MINUS:"-",DIV:"/",MULTI:"x",EQ:""};function show(){let e=document.createElement("div");e.innerHTML=_calculator_html__WEBPACK_IMPORTED_MODULE_0___default.a;let t=document.getElementsByTagName("body")[0];for(;e.children.length>0;)t.appendChild(e.children[0]);systemOpsListener(),speialOpsListener(),systemEventListener()}function systemEventListener(){var e=document.querySelectorAll("span.system");for(let t=0;t<e.length;t++){e[t].addEventListener("click",e=>{switch(e.target.getAttribute("value")){case"C":textBox=currentNumber="";break;case"CE":currentNumber="";break;case"DEL":let t=currentNumber.length;0!=t&&(currentNumber=currentNumber.replaceAt(t,""))}document.getElementsByClassName("total-expr")[0].textContent=textBox,document.getElementsByClassName("current-number")[0].textContent=currentNumber})}}function speialOpsListener(){var specialNodeList=document.querySelectorAll("span.special-symbols");for(let i=0;i<specialNodeList.length;i++){let childElement=specialNodeList[i];childElement.addEventListener("click",event=>{let value=event.target.getAttribute("value"),lastChar=null,totalLen=textBox.length;!textBox.isEmpty()&&currentNumber.isEmpty()&&Number.isNaN(Number.parseFloat(textBox.charAt(totalLen-1)))&&Number.isNaN(Number.parseFloat(value))?0!=totalLen&&(textBox=textBox.replaceAt(totalLen,map[value])):(textBox.isEmpty()?textBox=currentNumber+map[value]:(textBox=eval(textBox.replace("x","*")+currentNumber),textBox+=map[value]),currentNumber=""),document.getElementsByClassName("total-expr")[0].textContent=textBox,document.getElementsByClassName("current-number")[0].textContent=currentNumber})}}function systemOpsListener(){var e=document.querySelectorAll("span.number");for(let t=0;t<e.length;t++){e[t].addEventListener("click",e=>{let t=e.target.getAttribute("value");switch(t){case"dot":let e=currentNumber.length;-1==currentNumber.indexOf(".")&&"."!==currentNumber.charAt(e-1)&&(currentNumber.isEmpty()?currentNumber="0.":currentNumber+=".");break;default:currentNumber+=t}document.getElementsByClassName("total-expr")[0].textContent=textBox,document.getElementsByClassName("current-number")[0].textContent=currentNumber})}}},function(e,t,n){e.exports='<div class="calc-container">\r\n    <div class="calc-row">\r\n        <div class="text-box col-12">\r\n            <span class="total-expr"></span>\r\n            <span class="current-number"></span>\r\n        </div>\r\n    </div>\r\n    <div class="calc-row">\r\n        <span value="CE" class="button system col-3">CE</span>\r\n        <span value="C" class="button system col-3">C</span>\r\n        <span value="DEL" class="button system col-3">\r\n            <img src="'+n(3)+'"/>\r\n        </span>\r\n        <span value="DIV" class="button special-symbols col-3">/</span>\r\n    </div>\r\n    <div class="calc-row">\r\n        <span value="7" class="button number col-3">7</span>\r\n        <span value="8" class="button number col-3">8</span>\r\n        <span value="9" class="button number col-3">9</span>\r\n        <span value="MULTI" class="button special-symbols col-3">x</span>\r\n    </div>\r\n    <div class="calc-row">\r\n        <span value="4" class="button number col-3">4</span>\r\n        <span value="5" class="button number col-3">5</span>\r\n        <span value="6" class="button number col-3">6</span>\r\n        <span value="MINUS" class="button special-symbols col-3">-</span>\r\n    </div>\r\n    <div class="calc-row">\r\n        <span value="1" class="button number col-3">1</span>\r\n        <span value="2" class="button number col-3">2</span>\r\n        <span value="3" class="button number col-3">3</span>\r\n        <span value="PLUS" class="button special-symbols col-3">+</span>\r\n    </div>\r\n    <div class="calc-row">\r\n        <span class="button disabled col-3"></span>\r\n        <span value="0" class="button number col-3">0</span>\r\n        <span value="dot" class="button number col-3">.</span>\r\n        <span value="EQ" class="button special-symbols col-3">=</span>\r\n    </div>\r\n</div>'},function(e,t,n){"use strict";n.r(t);var r=n(0);function o(){Object(r.a)()}!function(e){console.log("Calculator-Widget starting");let t=e[e.calculator],n=t.q;if(n)for(var r=0;r<n.length;r++)o(n[r][0]);t=o}(window)},function(e,t,n){e.exports=n.p+"8f2881c9a7525fcb3311334a6cea750c.png"},function(e,t,n){var r=n(5);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0};n(7)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(6)(!1)).push([e.i,"@import url(https://fonts.googleapis.com/css?family=Roboto);",""]),t.push([e.i,".calc-container{\r\n    margin: 0px;\r\n    border: 0px;\r\n    max-width:300px;\r\n    display:flex;\r\n    flex-direction: column;\r\n    flex-wrap:wrap;\r\n    font-family: 'Roboto', sans-serif;\r\n    -webkit-box-shadow: 0px 2px 38px -3px rgba(0,0,0,0.75);\r\n    -moz-box-shadow: 0px 2px 38px -3px rgba(0,0,0,0.75);\r\n    box-shadow: 0px 2px 38px -3px rgba(0,0,0,0.75); \r\n    z-index:1001; \r\n}\r\n.text-box{\r\n    border:1px solid #E0E0E0;\r\n    background-color: #E0E0E0;\r\n    height:80px;\r\n    padding-right:5px;\r\n    text-align: right;\r\n}\r\n.total-expr{\r\n    font-size:15px;\r\n    /*line-height:40px;*/\r\n    position:relative;\r\n    top:20%;\r\n    display: block;\r\n}\r\n.current-number{\r\n    font-weight:bold;\r\n    font-size:30px;\r\n    position:relative;\r\n    top:20%;\r\n    /*line-height:40px;*/\r\n    display: block;\r\n}\r\n.calc-row{\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n\r\n.button{\r\n    min-width:50px;\r\n    min-height:40px;\r\n    border:1px solid #B8B8B8;\r\n    text-align: center;\r\n    justify-content: center;\r\n    font-size:20px;\r\n    line-height:50px;\r\n    cursor: pointer;\r\n}\r\n.disabled{\r\n    cursor:default;\r\n}\r\n.number{\r\n    font-weight: bold;\r\n}\r\n.number:hover{\r\n    /*background-color:#E0E0E0;*/\r\n    background-color:#EBEBEB;\r\n}\r\nspan.number:active{\r\n    background-color:#E0E0E0;\r\n    border:1px double #B8B8B8;\r\n}\r\nspan.button:not(.number):not(.disabled):active{\r\n    background-color:#00bfff;\r\n    color:white;\r\n    transition: 0.15s;\r\n}\r\nspan.button:not(.number):not(.disabled):not(:active):hover{\r\n    background-color:#0040ff;\r\n    color:white;\r\n}\r\n.special-symbols,\r\n.system\r\n{\r\n    font-size:16px;\r\n    background-color:#EBEBEB;\r\n}\r\n.col-3{\r\n    width:25%;\r\n}\r\n.col-4{\r\n    width:33%;\r\n}\r\n.col-12{\r\n    width:100%;\r\n}",""])},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),s=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(s).concat([o]).join("\n")}var a;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var s=this[o][0];"number"==typeof s&&(r[s]=!0)}for(o=0;o<e.length;o++){var a=e[o];"number"==typeof a[0]&&r[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){var r,o,s={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),l=function(e){var t={};return function(e){if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),i=null,c=0,u=[],p=n(8);function f(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=s[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(x(r.parts[a],t))}else{var l=[];for(a=0;a<r.parts.length;a++)l.push(x(r.parts[a],t));s[r.id]={id:r.id,refs:1,parts:l}}}}function d(e,t){for(var n=[],r={},o=0;o<e.length;o++){var s=e[o],a=t.base?s[0]+t.base:s[0],l={css:s[1],media:s[2],sourceMap:s[3]};r[a]?r[a].parts.push(l):n.push(r[a]={id:a,parts:[l]})}return n}function b(e,t){var n=l(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=u[u.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),u.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=l(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,o)}}function m(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=u.indexOf(e);t>=0&&u.splice(t,1)}function v(e){var t=document.createElement("style");return e.attrs.type="text/css",h(t,e.attrs),b(e,t),t}function h(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function x(e,t){var n,r,o,s;if(t.transform&&e.css){if(!(s=t.transform(e.css)))return function(){};e.css=s}if(t.singleton){var a=c++;n=i||(i=v(t)),r=y.bind(null,n,a,!1),o=y.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",h(t,e.attrs),b(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,s=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||s)&&(r=p(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),l=e.href;e.href=URL.createObjectURL(a),l&&URL.revokeObjectURL(l)}.bind(null,n,t),o=function(){m(n),n.href&&URL.revokeObjectURL(n.href)}):(n=v(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){m(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=d(e,t);return f(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var a=n[o];(l=s[a.id]).refs--,r.push(l)}e&&f(d(e,t),t);for(o=0;o<r.length;o++){var l;if(0===(l=r[o]).refs){for(var i=0;i<l.parts.length;i++)l.parts[i]();delete s[l.id]}}}};var _,g=(_=[],function(e,t){return _[e]=t,_.filter(Boolean).join("\n")});function y(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=g(t,o);else{var s=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(s,a[t]):e.appendChild(s)}}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,s=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(s)?e:(o=0===s.indexOf("//")?s:0===s.indexOf("/")?n+s:r+s.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXcvY2FsY3VsYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlldy9jYWxjdWxhdG9yLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXcvYmFja3NwYWNlLWFycm93LnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlldy9jYWxjdWxhdG9yLmNzcz85ZjZiIiwid2VicGFjazovLy8uL3NyYy92aWV3L2NhbGN1bGF0b3IuY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIl9fd2VicGFja19leHBvcnRzX18iLCJzaG93IiwiX2NhbGN1bGF0b3JfaHRtbF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiX2NhbGN1bGF0b3JfaHRtbF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJfY2FsY3VsYXRvcl9jc3NfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyIsIl9jYWxjdWxhdG9yX2Nzc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fX2RlZmF1bHQiLCJ0ZXh0Qm94IiwiY3VycmVudE51bWJlciIsIlN0cmluZyIsInJlcGxhY2VBdCIsInBvc2l0aW9uIiwicmVwbGFjZW1lbnQiLCJybGVuZ3RoIiwibGVuZ3RoIiwidGhpcyIsInN1YnN0ciIsImlzRW1wdHkiLCJ1bmRlZmluZWQiLCJ0cmltIiwibWFwIiwiRElWIiwiUExVUyIsIk1JTlVTIiwiTVVMVEkiLCJFUSIsInRlbXAiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJhIiwiYm9keSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiY2hpbGRyZW4iLCJhcHBlbmRDaGlsZCIsInN5c3RlbU9wc0xpc3RlbmVyIiwic3BlaWFsT3BzTGlzdGVuZXIiLCJzeXN0ZW1FdmVudExpc3RlbmVyIiwic3lzdGVtTm9kZUxpc3QiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50IiwidGFyZ2V0IiwiZ2V0QXR0cmlidXRlIiwidG90YWxMZW4iLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwidGV4dENvbnRlbnQiLCJzcGVjaWFsTm9kZUxpc3QiLCJjaGlsZEVsZW1lbnQiLCJsYXN0Q2hhciIsIk51bWJlciIsImlzTmFOIiwicGFyc2VGbG9hdCIsImNoYXJBdCIsImV2YWwiLCJyZXBsYWNlIiwibnVtYmVyTm9kZUxpc3QiLCJpbmRleE9mIiwiX3ZpZXdfY2FsY3VsYXRvcl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiYXBpSGFuZGxlciIsIndpbmRvdyIsImNvbnNvbGUiLCJsb2ciLCJnbG9iYWxPYmplY3QiLCJxdWV1ZSIsInEiLCJhcHAiLCJjb250ZW50Iiwib3B0aW9ucyIsImhtciIsInRyYW5zZm9ybSIsImxvY2FscyIsInB1c2giLCJ1c2VTb3VyY2VNYXAiLCJsaXN0IiwidG9TdHJpbmciLCJpdGVtIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlTWFwIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5Iiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwiY29uY2F0Iiwiam9pbiIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJtZWRpYVF1ZXJ5IiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImlkIiwiZm4iLCJtZW1vIiwic3R5bGVzSW5Eb20iLCJpc09sZElFIiwiYWxsIiwiYXRvYiIsImFwcGx5IiwiYXJndW1lbnRzIiwiZ2V0RWxlbWVudCIsInNlbGVjdG9yIiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJzdHlsZXNJbnNlcnRlZEF0VG9wIiwiZml4VXJscyIsImFkZFN0eWxlc1RvRG9tIiwic3R5bGVzIiwiZG9tU3R5bGUiLCJyZWZzIiwiaiIsInBhcnRzIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJuZXdTdHlsZXMiLCJiYXNlIiwicGFydCIsImNzcyIsIm1lZGlhIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGUiLCJpbnNlcnRJbnRvIiwiRXJyb3IiLCJsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCIsImluc2VydEF0IiwibmV4dFNpYmxpbmciLCJpbnNlcnRCZWZvcmUiLCJmaXJzdENoaWxkIiwiYmVmb3JlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiaWR4Iiwic3BsaWNlIiwiY3JlYXRlU3R5bGVFbGVtZW50IiwiYXR0cnMiLCJ0eXBlIiwiYWRkQXR0cnMiLCJlbCIsImtleXMiLCJmb3JFYWNoIiwic2V0QXR0cmlidXRlIiwib2JqIiwidXBkYXRlIiwicmVtb3ZlIiwicmVzdWx0Iiwic3R5bGVJbmRleCIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJCbG9iIiwibGluayIsInJlbCIsImNyZWF0ZUxpbmtFbGVtZW50IiwiYXV0b0ZpeFVybHMiLCJjb252ZXJ0VG9BYnNvbHV0ZVVybHMiLCJibG9iIiwib2xkU3JjIiwiaHJlZiIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3JlYXRlVGV4dE5vZGUiLCJuZXdPYmoiLCJERUJVRyIsIm5ld0xpc3QiLCJtYXlSZW1vdmUiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsImluZGV4IiwiZmlsdGVyIiwiQm9vbGVhbiIsImNzc05vZGUiLCJjaGlsZE5vZGVzIiwibG9jYXRpb24iLCJiYXNlVXJsIiwicHJvdG9jb2wiLCJob3N0IiwiY3VycmVudERpciIsInBhdGhuYW1lIiwiZnVsbE1hdGNoIiwib3JpZ1VybCIsIm5ld1VybCIsInVucXVvdGVkT3JpZ1VybCIsIiQxIiwidGVzdCJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsRUFBQSxHQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLEdBQUEsQ0FDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxRQUFBLElBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEVBQUEsQ0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FLMUNaLEVBQUFrQixF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b0JBQUEzSCxlQUFBMkgsU0FFQSxJQUFBQSxFQUNBLFVBQUFwRCxNQUFBLG9DQUlBLElBQUFMLEdBQUEsaUJBQUFBLEVBQ0EsT0FBQUEsRUFHQSxJQUFBMEQsRUFBQUQsRUFBQUUsU0FBQSxLQUFBRixFQUFBRyxLQUNBQyxFQUFBSCxFQUFBRCxFQUFBSyxTQUFBckksUUFBQSxpQkEyREEsT0EvQkF1RSxFQUFBdkUsUUFBQSwrREFBQXNJLEVBQUFDLEdBRUEsSUFXQUMsRUFYQUMsRUFBQUYsRUFDQTNLLE9BQ0FvQyxRQUFBLG9CQUFBN0UsRUFBQXVOLEdBQXdDLE9BQUFBLElBQ3hDMUksUUFBQSxvQkFBQTdFLEVBQUF1TixHQUF3QyxPQUFBQSxJQUd4QyxxREFBQUMsS0FBQUYsR0FDQUgsR0FRQUUsRUFGQSxJQUFBQyxFQUFBdkksUUFBQSxNQUVBdUksRUFDRyxJQUFBQSxFQUFBdkksUUFBQSxLQUVIK0gsRUFBQVEsRUFHQUwsRUFBQUssRUFBQXpJLFFBQUEsWUFJQSxPQUFBNEIsS0FBQUMsVUFBQTJHLEdBQUEiLCJmaWxlIjoid2lkZ2V0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDIpO1xuIiwiaW1wb3J0IGh0bWwgZnJvbSAnLi9jYWxjdWxhdG9yLmh0bWwnO1xyXG5pbXBvcnQgJy4vY2FsY3VsYXRvci5jc3MnO1xyXG5cclxudmFyIHRleHRCb3ggPSAnJztcclxudmFyIGN1cnJlbnROdW1iZXIgPSAnJztcclxuXHJcblN0cmluZy5wcm90b3R5cGUucmVwbGFjZUF0ID0gZnVuY3Rpb24ocG9zaXRpb24scmVwbGFjZW1lbnQpe1xyXG4gICAgbGV0IHJsZW5ndGggPSAocmVwbGFjZW1lbnQubGVuZ3RoPT0wKT8xOnJlcGxhY2VtZW50Lmxlbmd0aDtcclxuICAgIHJldHVybiB0aGlzLnN1YnN0cigwLHBvc2l0aW9uLTEpK3JlcGxhY2VtZW50K3RoaXMuc3Vic3RyKHBvc2l0aW9uLTErcmxlbmd0aCx0aGlzLmxlbmd0aCk7XHJcbn1cclxuXHJcblN0cmluZy5wcm90b3R5cGUuaXNFbXB0eSA9IGZ1bmN0aW9uKCl7XHJcbiAgICBpZih0aGlzPT1udWxsfHx0aGlzPT09dW5kZWZpbmVkKVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgZWxzZXtcclxuICAgICAgICBpZih0aGlzLnRyaW0oKT09bnVsbHx8dGhpcy50cmltKCk9PT1cIlwiKXtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5jb25zdCBtYXA9e1xyXG4gICAgXCJESVZcIjpcIi9cIixcclxuICAgIFwiUExVU1wiOlwiK1wiLFxyXG4gICAgXCJNSU5VU1wiOlwiLVwiLFxyXG4gICAgXCJESVZcIjpcIi9cIixcclxuICAgIFwiTVVMVElcIjpcInhcIixcclxuICAgIFwiRVFcIjpcIlwiXHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIHNob3coKXtcclxuICAgIGxldCB0ZW1wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB0ZW1wLmlubmVySFRNTCA9IGh0bWw7XHJcbiAgICBsZXQgYm9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF07XHJcbiAgICB3aGlsZSh0ZW1wLmNoaWxkcmVuLmxlbmd0aCA+IDApe1xyXG4gICAgICAgIGJvZHkuYXBwZW5kQ2hpbGQodGVtcC5jaGlsZHJlblswXSk7XHJcbiAgICB9XHJcbiAgICAvL0FkZGluZyBldmVudCBsaXN0ZW5lcnMgZm9yIE51bWJlcnMgYW5kIGRvdHNcclxuICAgIHN5c3RlbU9wc0xpc3RlbmVyKCk7XHJcbiAgICAvL0FkZGluZyBldmVudCBsaXN0ZW5lciBmb3IgbnVtYmVyIG9wZXJhdGlvblxyXG4gICAgc3BlaWFsT3BzTGlzdGVuZXIoKTtcclxuICAgIC8vQWRkaW5nIGV2ZW50IGxpc3RlbmVyIGZvciBzeXN0ZW0gY29tbWFuZHMgbGlrZSBDLENFLERFTFxyXG4gICAgc3lzdGVtRXZlbnRMaXN0ZW5lcigpO1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gc3lzdGVtRXZlbnRMaXN0ZW5lcigpe1xyXG4gICAgdmFyIHN5c3RlbU5vZGVMaXN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInNwYW4uc3lzdGVtXCIpO1xyXG4gICAgZm9yKGxldCBpPTA7aTxzeXN0ZW1Ob2RlTGlzdC5sZW5ndGg7aSsrKXtcclxuICAgICAgICBsZXQgY2hpbGRFbGVtZW50ID0gc3lzdGVtTm9kZUxpc3RbaV07XHJcbiAgICAgICAgY2hpbGRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywoZXZlbnQpPT57XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IGV2ZW50LnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtcclxuICAgICAgICAgICAgc3dpdGNoKHZhbHVlKXtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJDXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dEJveD1jdXJyZW50TnVtYmVyPVwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiQ0VcIjpcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50TnVtYmVyPVwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiREVMXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRvdGFsTGVuID0gY3VycmVudE51bWJlci5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYodG90YWxMZW4hPTApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnROdW1iZXIgPSBjdXJyZW50TnVtYmVyLnJlcGxhY2VBdCh0b3RhbExlbixcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwidG90YWwtZXhwclwiKVswXS50ZXh0Q29udGVudCA9IHRleHRCb3g7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJjdXJyZW50LW51bWJlclwiKVswXS50ZXh0Q29udGVudCA9IGN1cnJlbnROdW1iZXI7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gc3BlaWFsT3BzTGlzdGVuZXIoKXtcclxuICAgIHZhciBzcGVjaWFsTm9kZUxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwic3Bhbi5zcGVjaWFsLXN5bWJvbHNcIik7XHJcbiAgICBmb3IobGV0IGk9MDtpPHNwZWNpYWxOb2RlTGlzdC5sZW5ndGg7aSsrKXtcclxuICAgICAgICBsZXQgY2hpbGRFbGVtZW50ID0gc3BlY2lhbE5vZGVMaXN0W2ldO1xyXG4gICAgICAgIGNoaWxkRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsKGV2ZW50KT0+e1xyXG4gICAgICAgICAgICBsZXQgdmFsdWUgPSBldmVudC50YXJnZXQuZ2V0QXR0cmlidXRlKFwidmFsdWVcIik7XHJcbiAgICAgICAgICAgIGxldCBsYXN0Q2hhciA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCB0b3RhbExlbiA9IHRleHRCb3gubGVuZ3RoO1xyXG4gICAgICAgICAgICBpZighdGV4dEJveC5pc0VtcHR5KCkgJiYgY3VycmVudE51bWJlci5pc0VtcHR5KCkgJiYgTnVtYmVyLmlzTmFOKE51bWJlci5wYXJzZUZsb2F0KHRleHRCb3guY2hhckF0KHRvdGFsTGVuLTEpKSkgJiYgTnVtYmVyLmlzTmFOKE51bWJlci5wYXJzZUZsb2F0KHZhbHVlKSkpe1xyXG4gICAgICAgICAgICAgICAgaWYodG90YWxMZW4hPTApXHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dEJveCA9IHRleHRCb3gucmVwbGFjZUF0KHRvdGFsTGVuLG1hcFt2YWx1ZV0pO1xyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgIGlmKCF0ZXh0Qm94LmlzRW1wdHkoKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgdGV4dEJveCA9IGV2YWwodGV4dEJveC5yZXBsYWNlKFwieFwiLFwiKlwiKStjdXJyZW50TnVtYmVyKTtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0Qm94PXRleHRCb3grbWFwW3ZhbHVlXTtcclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHRCb3g9Y3VycmVudE51bWJlcittYXBbdmFsdWVdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY3VycmVudE51bWJlcj1cIlwiO1xyXG4gICAgICAgICAgICB9ICAgICAgICAgICBcclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInRvdGFsLWV4cHJcIilbMF0udGV4dENvbnRlbnQgPSB0ZXh0Qm94O1xyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiY3VycmVudC1udW1iZXJcIilbMF0udGV4dENvbnRlbnQgPSBjdXJyZW50TnVtYmVyO1xyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHN5c3RlbU9wc0xpc3RlbmVyKCl7XHJcbiAgICB2YXIgbnVtYmVyTm9kZUxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwic3Bhbi5udW1iZXJcIik7XHJcbiAgICBmb3IobGV0IGk9MDtpPG51bWJlck5vZGVMaXN0Lmxlbmd0aDtpKyspe1xyXG4gICAgICAgIGxldCBjaGlsZEVsZW1lbnQgPSBudW1iZXJOb2RlTGlzdFtpXTtcclxuICAgICAgICBjaGlsZEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLChldmVudCk9PntcclxuICAgICAgICAgICAgbGV0IHZhbHVlID0gZXZlbnQudGFyZ2V0LmdldEF0dHJpYnV0ZShcInZhbHVlXCIpO1xyXG4gICAgICAgICAgICBzd2l0Y2godmFsdWUpe1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImRvdFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0b3RhbExlbiA9IGN1cnJlbnROdW1iZXIubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGN1cnJlbnROdW1iZXIuaW5kZXhPZihcIi5cIik9PS0xICYmIGN1cnJlbnROdW1iZXIuY2hhckF0KHRvdGFsTGVuLTEpIT09XCIuXCIpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZihjdXJyZW50TnVtYmVyLmlzRW1wdHkoKSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50TnVtYmVyPVwiMC5cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50TnVtYmVyPWN1cnJlbnROdW1iZXIrXCIuXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnROdW1iZXI9Y3VycmVudE51bWJlcit2YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfSAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwidG90YWwtZXhwclwiKVswXS50ZXh0Q29udGVudCA9IHRleHRCb3g7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJjdXJyZW50LW51bWJlclwiKVswXS50ZXh0Q29udGVudCA9IGN1cnJlbnROdW1iZXI7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxufVxyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1cXFwiY2FsYy1jb250YWluZXJcXFwiPlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjYWxjLXJvd1xcXCI+XFxyXFxuICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ0ZXh0LWJveCBjb2wtMTJcXFwiPlxcclxcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJ0b3RhbC1leHByXFxcIj48L3NwYW4+XFxyXFxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImN1cnJlbnQtbnVtYmVyXFxcIj48L3NwYW4+XFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgPC9kaXY+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImNhbGMtcm93XFxcIj5cXHJcXG4gICAgICAgIDxzcGFuIHZhbHVlPVxcXCJDRVxcXCIgY2xhc3M9XFxcImJ1dHRvbiBzeXN0ZW0gY29sLTNcXFwiPkNFPC9zcGFuPlxcclxcbiAgICAgICAgPHNwYW4gdmFsdWU9XFxcIkNcXFwiIGNsYXNzPVxcXCJidXR0b24gc3lzdGVtIGNvbC0zXFxcIj5DPC9zcGFuPlxcclxcbiAgICAgICAgPHNwYW4gdmFsdWU9XFxcIkRFTFxcXCIgY2xhc3M9XFxcImJ1dHRvbiBzeXN0ZW0gY29sLTNcXFwiPlxcclxcbiAgICAgICAgICAgIDxpbWcgc3JjPVxcXCJcIiArIHJlcXVpcmUoXCIuL2JhY2tzcGFjZS1hcnJvdy5wbmdcIikgKyBcIlxcXCIvPlxcclxcbiAgICAgICAgPC9zcGFuPlxcclxcbiAgICAgICAgPHNwYW4gdmFsdWU9XFxcIkRJVlxcXCIgY2xhc3M9XFxcImJ1dHRvbiBzcGVjaWFsLXN5bWJvbHMgY29sLTNcXFwiPi88L3NwYW4+XFxyXFxuICAgIDwvZGl2PlxcclxcbiAgICA8ZGl2IGNsYXNzPVxcXCJjYWxjLXJvd1xcXCI+XFxyXFxuICAgICAgICA8c3BhbiB2YWx1ZT1cXFwiN1xcXCIgY2xhc3M9XFxcImJ1dHRvbiBudW1iZXIgY29sLTNcXFwiPjc8L3NwYW4+XFxyXFxuICAgICAgICA8c3BhbiB2YWx1ZT1cXFwiOFxcXCIgY2xhc3M9XFxcImJ1dHRvbiBudW1iZXIgY29sLTNcXFwiPjg8L3NwYW4+XFxyXFxuICAgICAgICA8c3BhbiB2YWx1ZT1cXFwiOVxcXCIgY2xhc3M9XFxcImJ1dHRvbiBudW1iZXIgY29sLTNcXFwiPjk8L3NwYW4+XFxyXFxuICAgICAgICA8c3BhbiB2YWx1ZT1cXFwiTVVMVElcXFwiIGNsYXNzPVxcXCJidXR0b24gc3BlY2lhbC1zeW1ib2xzIGNvbC0zXFxcIj54PC9zcGFuPlxcclxcbiAgICA8L2Rpdj5cXHJcXG4gICAgPGRpdiBjbGFzcz1cXFwiY2FsYy1yb3dcXFwiPlxcclxcbiAgICAgICAgPHNwYW4gdmFsdWU9XFxcIjRcXFwiIGNsYXNzPVxcXCJidXR0b24gbnVtYmVyIGNvbC0zXFxcIj40PC9zcGFuPlxcclxcbiAgICAgICAgPHNwYW4gdmFsdWU9XFxcIjVcXFwiIGNsYXNzPVxcXCJidXR0b24gbnVtYmVyIGNvbC0zXFxcIj41PC9zcGFuPlxcclxcbiAgICAgICAgPHNwYW4gdmFsdWU9XFxcIjZcXFwiIGNsYXNzPVxcXCJidXR0b24gbnVtYmVyIGNvbC0zXFxcIj42PC9zcGFuPlxcclxcbiAgICAgICAgPHNwYW4gdmFsdWU9XFxcIk1JTlVTXFxcIiBjbGFzcz1cXFwiYnV0dG9uIHNwZWNpYWwtc3ltYm9scyBjb2wtM1xcXCI+LTwvc3Bhbj5cXHJcXG4gICAgPC9kaXY+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImNhbGMtcm93XFxcIj5cXHJcXG4gICAgICAgIDxzcGFuIHZhbHVlPVxcXCIxXFxcIiBjbGFzcz1cXFwiYnV0dG9uIG51bWJlciBjb2wtM1xcXCI+MTwvc3Bhbj5cXHJcXG4gICAgICAgIDxzcGFuIHZhbHVlPVxcXCIyXFxcIiBjbGFzcz1cXFwiYnV0dG9uIG51bWJlciBjb2wtM1xcXCI+Mjwvc3Bhbj5cXHJcXG4gICAgICAgIDxzcGFuIHZhbHVlPVxcXCIzXFxcIiBjbGFzcz1cXFwiYnV0dG9uIG51bWJlciBjb2wtM1xcXCI+Mzwvc3Bhbj5cXHJcXG4gICAgICAgIDxzcGFuIHZhbHVlPVxcXCJQTFVTXFxcIiBjbGFzcz1cXFwiYnV0dG9uIHNwZWNpYWwtc3ltYm9scyBjb2wtM1xcXCI+Kzwvc3Bhbj5cXHJcXG4gICAgPC9kaXY+XFxyXFxuICAgIDxkaXYgY2xhc3M9XFxcImNhbGMtcm93XFxcIj5cXHJcXG4gICAgICAgIDxzcGFuIGNsYXNzPVxcXCJidXR0b24gZGlzYWJsZWQgY29sLTNcXFwiPjwvc3Bhbj5cXHJcXG4gICAgICAgIDxzcGFuIHZhbHVlPVxcXCIwXFxcIiBjbGFzcz1cXFwiYnV0dG9uIG51bWJlciBjb2wtM1xcXCI+MDwvc3Bhbj5cXHJcXG4gICAgICAgIDxzcGFuIHZhbHVlPVxcXCJkb3RcXFwiIGNsYXNzPVxcXCJidXR0b24gbnVtYmVyIGNvbC0zXFxcIj4uPC9zcGFuPlxcclxcbiAgICAgICAgPHNwYW4gdmFsdWU9XFxcIkVRXFxcIiBjbGFzcz1cXFwiYnV0dG9uIHNwZWNpYWwtc3ltYm9scyBjb2wtM1xcXCI+PTwvc3Bhbj5cXHJcXG4gICAgPC9kaXY+XFxyXFxuPC9kaXY+XCI7IiwiaW1wb3J0IHsgc2hvdyB9IGZyb20gJy4vdmlldy9jYWxjdWxhdG9yLmpzJztcclxuXHJcbmNvbnN0IHN1cHBvcnRlZEFQSSA9IFsnaW5pdCcsICdtZXNzYWdlJ107XHJcblxyXG5mdW5jdGlvbiBhcHAod2luZG93KXtcclxuICAgIGNvbnNvbGUubG9nKCdDYWxjdWxhdG9yLVdpZGdldCBzdGFydGluZycpO1xyXG4gICAgbGV0IGdsb2JhbE9iamVjdCA9IHdpbmRvd1t3aW5kb3dbJ2NhbGN1bGF0b3InXV07XHJcbiAgICBsZXQgcXVldWUgPSBnbG9iYWxPYmplY3QucTtcclxuXHJcbiAgICBpZihxdWV1ZSl7XHJcbiAgICAgICAgZm9yKHZhciBpPTA7IGk8cXVldWUubGVuZ3RoO2krKyl7XHJcbiAgICAgICAgICAgIGFwaUhhbmRsZXIocXVldWVbaV1bMF0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnbG9iYWxPYmplY3QgPSBhcGlIYW5kbGVyO1xyXG59XHJcbmZ1bmN0aW9uIGFwaUhhbmRsZXIoKXtcclxuICAgIHNob3coKTtcclxuICAgIFxyXG59XHJcbmFwcCh3aW5kb3cpOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjhmMjg4MWM5YTc1MjVmY2IzMzExMzM0YTZjZWE3NTBjLnBuZ1wiOyIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL2NhbGN1bGF0b3IuY3NzXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4vLyBQcmVwYXJlIGNzc1RyYW5zZm9ybWF0aW9uXG52YXIgdHJhbnNmb3JtO1xuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG5cdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdGlmKCFjb250ZW50LmxvY2Fscykge1xuXHRcdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL2NhbGN1bGF0b3IuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL2NhbGN1bGF0b3IuY3NzXCIpO1xuXHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0fSk7XG5cdH1cblx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIkBpbXBvcnQgdXJsKGh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1Sb2JvdG8pO1wiLCBcIlwiXSk7XG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmNhbGMtY29udGFpbmVye1xcclxcbiAgICBtYXJnaW46IDBweDtcXHJcXG4gICAgYm9yZGVyOiAwcHg7XFxyXFxuICAgIG1heC13aWR0aDozMDBweDtcXHJcXG4gICAgZGlzcGxheTpmbGV4O1xcclxcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcclxcbiAgICBmbGV4LXdyYXA6d3JhcDtcXHJcXG4gICAgZm9udC1mYW1pbHk6ICdSb2JvdG8nLCBzYW5zLXNlcmlmO1xcclxcbiAgICAtd2Via2l0LWJveC1zaGFkb3c6IDBweCAycHggMzhweCAtM3B4IHJnYmEoMCwwLDAsMC43NSk7XFxyXFxuICAgIC1tb3otYm94LXNoYWRvdzogMHB4IDJweCAzOHB4IC0zcHggcmdiYSgwLDAsMCwwLjc1KTtcXHJcXG4gICAgYm94LXNoYWRvdzogMHB4IDJweCAzOHB4IC0zcHggcmdiYSgwLDAsMCwwLjc1KTsgXFxyXFxuICAgIHotaW5kZXg6MTAwMTsgXFxyXFxufVxcclxcbi50ZXh0LWJveHtcXHJcXG4gICAgYm9yZGVyOjFweCBzb2xpZCAjRTBFMEUwO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRTBFMEUwO1xcclxcbiAgICBoZWlnaHQ6ODBweDtcXHJcXG4gICAgcGFkZGluZy1yaWdodDo1cHg7XFxyXFxuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xcclxcbn1cXHJcXG4udG90YWwtZXhwcntcXHJcXG4gICAgZm9udC1zaXplOjE1cHg7XFxyXFxuICAgIC8qbGluZS1oZWlnaHQ6NDBweDsqL1xcclxcbiAgICBwb3NpdGlvbjpyZWxhdGl2ZTtcXHJcXG4gICAgdG9wOjIwJTtcXHJcXG4gICAgZGlzcGxheTogYmxvY2s7XFxyXFxufVxcclxcbi5jdXJyZW50LW51bWJlcntcXHJcXG4gICAgZm9udC13ZWlnaHQ6Ym9sZDtcXHJcXG4gICAgZm9udC1zaXplOjMwcHg7XFxyXFxuICAgIHBvc2l0aW9uOnJlbGF0aXZlO1xcclxcbiAgICB0b3A6MjAlO1xcclxcbiAgICAvKmxpbmUtaGVpZ2h0OjQwcHg7Ki9cXHJcXG4gICAgZGlzcGxheTogYmxvY2s7XFxyXFxufVxcclxcbi5jYWxjLXJvd3tcXHJcXG4gICAgZGlzcGxheTogZmxleDtcXHJcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXHJcXG59XFxyXFxuXFxyXFxuLmJ1dHRvbntcXHJcXG4gICAgbWluLXdpZHRoOjUwcHg7XFxyXFxuICAgIG1pbi1oZWlnaHQ6NDBweDtcXHJcXG4gICAgYm9yZGVyOjFweCBzb2xpZCAjQjhCOEI4O1xcclxcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcclxcbiAgICBmb250LXNpemU6MjBweDtcXHJcXG4gICAgbGluZS1oZWlnaHQ6NTBweDtcXHJcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcclxcbn1cXHJcXG4uZGlzYWJsZWR7XFxyXFxuICAgIGN1cnNvcjpkZWZhdWx0O1xcclxcbn1cXHJcXG4ubnVtYmVye1xcclxcbiAgICBmb250LXdlaWdodDogYm9sZDtcXHJcXG59XFxyXFxuLm51bWJlcjpob3ZlcntcXHJcXG4gICAgLypiYWNrZ3JvdW5kLWNvbG9yOiNFMEUwRTA7Ki9cXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjojRUJFQkVCO1xcclxcbn1cXHJcXG5zcGFuLm51bWJlcjphY3RpdmV7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6I0UwRTBFMDtcXHJcXG4gICAgYm9yZGVyOjFweCBkb3VibGUgI0I4QjhCODtcXHJcXG59XFxyXFxuc3Bhbi5idXR0b246bm90KC5udW1iZXIpOm5vdCguZGlzYWJsZWQpOmFjdGl2ZXtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjojMDBiZmZmO1xcclxcbiAgICBjb2xvcjp3aGl0ZTtcXHJcXG4gICAgdHJhbnNpdGlvbjogMC4xNXM7XFxyXFxufVxcclxcbnNwYW4uYnV0dG9uOm5vdCgubnVtYmVyKTpub3QoLmRpc2FibGVkKTpub3QoOmFjdGl2ZSk6aG92ZXJ7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IzAwNDBmZjtcXHJcXG4gICAgY29sb3I6d2hpdGU7XFxyXFxufVxcclxcbi5zcGVjaWFsLXN5bWJvbHMsXFxyXFxuLnN5c3RlbVxcclxcbntcXHJcXG4gICAgZm9udC1zaXplOjE2cHg7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6I0VCRUJFQjtcXHJcXG59XFxyXFxuLmNvbC0ze1xcclxcbiAgICB3aWR0aDoyNSU7XFxyXFxufVxcclxcbi5jb2wtNHtcXHJcXG4gICAgd2lkdGg6MzMlO1xcclxcbn1cXHJcXG4uY29sLTEye1xcclxcbiAgICB3aWR0aDoxMDAlO1xcclxcbn1cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odXNlU291cmNlTWFwKSB7XG5cdHZhciBsaXN0ID0gW107XG5cblx0Ly8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHR2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblx0XHRcdGlmKGl0ZW1bMl0pIHtcblx0XHRcdFx0cmV0dXJuIFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgY29udGVudCArIFwifVwiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdFx0XHR9XG5cdFx0fSkuam9pbihcIlwiKTtcblx0fTtcblxuXHQvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXG5cdFx0XHRtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGlkID0gdGhpc1tpXVswXTtcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuXHRcdH1cblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XG5cdFx0XHQvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cblx0XHRcdC8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IG1lZGlhUXVlcnk7XG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcblx0dmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuXHR2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cdGlmICghY3NzTWFwcGluZykge1xuXHRcdHJldHVybiBjb250ZW50O1xuXHR9XG5cblx0aWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuXHRcdHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG5cdFx0XHRyZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcblx0fVxuXG5cdHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59XG5cbi8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5cdHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuXHR2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuXG5cdHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59XG4iLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxudmFyXHRtZW1vaXplID0gZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHR5cGVvZiBtZW1vID09PSBcInVuZGVmaW5lZFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gbWVtbztcblx0fTtcbn07XG5cbnZhciBpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG5cdC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG5cdC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcblx0Ly8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuXHQvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcblx0Ly8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG5cdHJldHVybiB3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYjtcbn0pO1xuXG52YXIgZ2V0RWxlbWVudCA9IChmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW8gPSB7fTtcblxuXHRyZXR1cm4gZnVuY3Rpb24oc2VsZWN0b3IpIHtcblx0XHRpZiAodHlwZW9mIG1lbW9bc2VsZWN0b3JdID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHR2YXIgc3R5bGVUYXJnZXQgPSBmbi5jYWxsKHRoaXMsIHNlbGVjdG9yKTtcblx0XHRcdC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cdFx0XHRpZiAoc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuXHRcdFx0XHRcdC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcblx0XHRcdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRtZW1vW3NlbGVjdG9yXSA9IHN0eWxlVGFyZ2V0O1xuXHRcdH1cblx0XHRyZXR1cm4gbWVtb1tzZWxlY3Rvcl1cblx0fTtcbn0pKGZ1bmN0aW9uICh0YXJnZXQpIHtcblx0cmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KVxufSk7XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyXHRzaW5nbGV0b25Db3VudGVyID0gMDtcbnZhclx0c3R5bGVzSW5zZXJ0ZWRBdFRvcCA9IFtdO1xuXG52YXJcdGZpeFVybHMgPSByZXF1aXJlKFwiLi91cmxzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiBERUJVRyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBERUJVRykge1xuXHRcdGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcblx0fVxuXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdG9wdGlvbnMuYXR0cnMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRycyA9PT0gXCJvYmplY3RcIiA/IG9wdGlvbnMuYXR0cnMgOiB7fTtcblxuXHQvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXHRpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gXCJib29sZWFuXCIpIG9wdGlvbnMuc2luZ2xldG9uID0gaXNPbGRJRSgpO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIDxoZWFkPiBlbGVtZW50XG5cdGlmICghb3B0aW9ucy5pbnNlcnRJbnRvKSBvcHRpb25zLmluc2VydEludG8gPSBcImhlYWRcIjtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSBib3R0b20gb2YgdGhlIHRhcmdldFxuXHRpZiAoIW9wdGlvbnMuaW5zZXJ0QXQpIG9wdGlvbnMuaW5zZXJ0QXQgPSBcImJvdHRvbVwiO1xuXG5cdHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucyk7XG5cblx0YWRkU3R5bGVzVG9Eb20oc3R5bGVzLCBvcHRpb25zKTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gdXBkYXRlIChuZXdMaXN0KSB7XG5cdFx0dmFyIG1heVJlbW92ZSA9IFtdO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRcdGRvbVN0eWxlLnJlZnMtLTtcblx0XHRcdG1heVJlbW92ZS5wdXNoKGRvbVN0eWxlKTtcblx0XHR9XG5cblx0XHRpZihuZXdMaXN0KSB7XG5cdFx0XHR2YXIgbmV3U3R5bGVzID0gbGlzdFRvU3R5bGVzKG5ld0xpc3QsIG9wdGlvbnMpO1xuXHRcdFx0YWRkU3R5bGVzVG9Eb20obmV3U3R5bGVzLCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1heVJlbW92ZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGRvbVN0eWxlID0gbWF5UmVtb3ZlW2ldO1xuXG5cdFx0XHRpZihkb21TdHlsZS5yZWZzID09PSAwKSB7XG5cdFx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIGRvbVN0eWxlLnBhcnRzW2pdKCk7XG5cblx0XHRcdFx0ZGVsZXRlIHN0eWxlc0luRG9tW2RvbVN0eWxlLmlkXTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59O1xuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbSAoc3R5bGVzLCBvcHRpb25zKSB7XG5cdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0dmFyIGRvbVN0eWxlID0gc3R5bGVzSW5Eb21baXRlbS5pZF07XG5cblx0XHRpZihkb21TdHlsZSkge1xuXHRcdFx0ZG9tU3R5bGUucmVmcysrO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgZG9tU3R5bGUucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHNbal0oaXRlbS5wYXJ0c1tqXSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvcig7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgcGFydHMgPSBbXTtcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0cGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cblx0XHRcdHN0eWxlc0luRG9tW2l0ZW0uaWRdID0ge2lkOiBpdGVtLmlkLCByZWZzOiAxLCBwYXJ0czogcGFydHN9O1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBsaXN0VG9TdHlsZXMgKGxpc3QsIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlcyA9IFtdO1xuXHR2YXIgbmV3U3R5bGVzID0ge307XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFyIGl0ZW0gPSBsaXN0W2ldO1xuXHRcdHZhciBpZCA9IG9wdGlvbnMuYmFzZSA/IGl0ZW1bMF0gKyBvcHRpb25zLmJhc2UgOiBpdGVtWzBdO1xuXHRcdHZhciBjc3MgPSBpdGVtWzFdO1xuXHRcdHZhciBtZWRpYSA9IGl0ZW1bMl07XG5cdFx0dmFyIHNvdXJjZU1hcCA9IGl0ZW1bM107XG5cdFx0dmFyIHBhcnQgPSB7Y3NzOiBjc3MsIG1lZGlhOiBtZWRpYSwgc291cmNlTWFwOiBzb3VyY2VNYXB9O1xuXG5cdFx0aWYoIW5ld1N0eWxlc1tpZF0pIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7aWQ6IGlkLCBwYXJ0czogW3BhcnRdfSk7XG5cdFx0ZWxzZSBuZXdTdHlsZXNbaWRdLnBhcnRzLnB1c2gocGFydCk7XG5cdH1cblxuXHRyZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQgKG9wdGlvbnMsIHN0eWxlKSB7XG5cdHZhciB0YXJnZXQgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50bylcblxuXHRpZiAoIXRhcmdldCkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0SW50bycgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuXHR9XG5cblx0dmFyIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcFtzdHlsZXNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xuXG5cdGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcInRvcFwiKSB7XG5cdFx0aWYgKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgdGFyZ2V0LmZpcnN0Q2hpbGQpO1xuXHRcdH0gZWxzZSBpZiAobGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0XHR9XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5wdXNoKHN0eWxlKTtcblx0fSBlbHNlIGlmIChvcHRpb25zLmluc2VydEF0ID09PSBcImJvdHRvbVwiKSB7XG5cdFx0dGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcblx0fSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJvYmplY3RcIiAmJiBvcHRpb25zLmluc2VydEF0LmJlZm9yZSkge1xuXHRcdHZhciBuZXh0U2libGluZyA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvICsgXCIgXCIgKyBvcHRpb25zLmluc2VydEF0LmJlZm9yZSk7XG5cdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbmV4dFNpYmxpbmcpO1xuXHR9IGVsc2Uge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIltTdHlsZSBMb2FkZXJdXFxuXFxuIEludmFsaWQgdmFsdWUgZm9yIHBhcmFtZXRlciAnaW5zZXJ0QXQnICgnb3B0aW9ucy5pbnNlcnRBdCcpIGZvdW5kLlxcbiBNdXN0IGJlICd0b3AnLCAnYm90dG9tJywgb3IgT2JqZWN0LlxcbiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIjaW5zZXJ0YXQpXFxuXCIpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudCAoc3R5bGUpIHtcblx0aWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHJldHVybiBmYWxzZTtcblx0c3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG5cblx0dmFyIGlkeCA9IHN0eWxlc0luc2VydGVkQXRUb3AuaW5kZXhPZihzdHlsZSk7XG5cdGlmKGlkeCA+PSAwKSB7XG5cdFx0c3R5bGVzSW5zZXJ0ZWRBdFRvcC5zcGxpY2UoaWR4LCAxKTtcblx0fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVTdHlsZUVsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuXG5cdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblxuXHRhZGRBdHRycyhzdHlsZSwgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBzdHlsZSk7XG5cblx0cmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMaW5rRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpO1xuXG5cdG9wdGlvbnMuYXR0cnMudHlwZSA9IFwidGV4dC9jc3NcIjtcblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlIChvYmosIG9wdGlvbnMpIHtcblx0dmFyIHN0eWxlLCB1cGRhdGUsIHJlbW92ZSwgcmVzdWx0O1xuXG5cdC8vIElmIGEgdHJhbnNmb3JtIGZ1bmN0aW9uIHdhcyBkZWZpbmVkLCBydW4gaXQgb24gdGhlIGNzc1xuXHRpZiAob3B0aW9ucy50cmFuc2Zvcm0gJiYgb2JqLmNzcykge1xuXHQgICAgcmVzdWx0ID0gb3B0aW9ucy50cmFuc2Zvcm0ob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcLykvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=