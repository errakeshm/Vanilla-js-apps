!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",function(){return show});var _calculator_html__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(1),_calculator_html__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(_calculator_html__WEBPACK_IMPORTED_MODULE_0__),_calculator_css__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(4),_calculator_css__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(_calculator_css__WEBPACK_IMPORTED_MODULE_1__),textBox="",currentNumber="";String.prototype.replaceAt=function(e,t){let n=0==t.length?1:t.length;return this.substr(0,e-1)+t+this.substr(e-1+n,this.length)},String.prototype.isEmpty=function(){return null==this||void 0===this||(null==this.trim()||""===this.trim())};const map={DIV:"/",PLUS:"+",MINUS:"-",DIV:"/",MULTI:"x",EQ:""};function show(){let e=document.createElement("div");e.innerHTML=_calculator_html__WEBPACK_IMPORTED_MODULE_0___default.a;let t=document.getElementsByClassName("calculator")[0];for(;e.children.length>0;)t.appendChild(e.children[0]);systemOpsListener(),speialOpsListener(),systemEventListener(),dragAndDropWidget()}var position=[];function dragAndDropWidget(){document.getElementById("calc-widget").addEventListener("dragstart",e=>{position=[],e.dataTransfer.effectAllowed="move";let t=window.getComputedStyle(e.target,null),n=t.getPropertyValue("left"),r=t.getPropertyValue("top");n=n.replace("px",""),r=r.replace("px",""),Number.isNaN(n)&&(n=10),Number.isNaN(r)&&(r=10),position.push(n-e.clientX),position.push(r-e.clientY)}),document.getElementById("calc-widget").addEventListener("dragend",e=>{e.preventDefault();let t=e.target.id;document.getElementById(t).style.position="relative",document.getElementById(t).style.left=e.clientX+position[0],document.getElementById(t).style.top=e.clientY+position[1]})}function systemEventListener(){var e=document.querySelectorAll("span.system");for(let t=0;t<e.length;t++){e[t].addEventListener("click",e=>{switch(e.target.getAttribute("value")){case"C":textBox=currentNumber="";break;case"CE":currentNumber="";break;case"DEL":let t=currentNumber.length;0!=t&&(currentNumber=currentNumber.replaceAt(t,""))}document.getElementsByClassName("total-expr")[0].textContent=textBox,document.getElementsByClassName("current-number")[0].textContent=currentNumber})}}function speialOpsListener(){var specialNodeList=document.querySelectorAll("span.special-symbols");for(let i=0;i<specialNodeList.length;i++){let childElement=specialNodeList[i];childElement.addEventListener("click",event=>{let value=event.target.getAttribute("value"),lastChar=null,totalLen=textBox.length;!textBox.isEmpty()&&currentNumber.isEmpty()&&Number.isNaN(Number.parseFloat(textBox.charAt(totalLen-1)))&&Number.isNaN(Number.parseFloat(value))?0!=totalLen&&(textBox=textBox.replaceAt(totalLen,map[value])):(textBox.isEmpty()?textBox=currentNumber+map[value]:(textBox=eval(textBox.replace("x","*")+currentNumber),textBox+=map[value]),currentNumber=""),document.getElementsByClassName("total-expr")[0].textContent=textBox,document.getElementsByClassName("current-number")[0].textContent=currentNumber})}}function systemOpsListener(){var e=document.querySelectorAll("span.number");for(let t=0;t<e.length;t++){e[t].addEventListener("click",e=>{let t=e.target.getAttribute("value");switch(t){case"dot":let e=currentNumber.length;-1==currentNumber.indexOf(".")&&"."!==currentNumber.charAt(e-1)&&(currentNumber.isEmpty()?currentNumber="0.":currentNumber+=".");break;default:currentNumber+=t}document.getElementsByClassName("total-expr")[0].textContent=textBox,document.getElementsByClassName("current-number")[0].textContent=currentNumber})}}},function(e,t,n){e.exports='<div id="calc-widget" class="calc-container" draggable="true">\r\n    <div class="calc-row">\r\n        <div class="text-box col-12">\r\n            <span class="total-expr"></span>\r\n            <span class="current-number"></span>\r\n        </div>\r\n    </div>\r\n    <div class="calc-row">\r\n        <span value="CE" class="button system col-3">CE</span>\r\n        <span value="C" class="button system col-3">C</span>\r\n        <span value="DEL" class="button system col-3">\r\n            <img style="padding-top:20%;color:white;"src="'+n(3)+'"/>\r\n        </span>\r\n        <span value="DIV" class="button special-symbols col-3">/</span>\r\n    </div>\r\n    <div class="calc-row">\r\n        <span value="7" class="button number col-3">7</span>\r\n        <span value="8" class="button number col-3">8</span>\r\n        <span value="9" class="button number col-3">9</span>\r\n        <span value="MULTI" class="button special-symbols col-3">x</span>\r\n    </div>\r\n    <div class="calc-row">\r\n        <span value="4" class="button number col-3">4</span>\r\n        <span value="5" class="button number col-3">5</span>\r\n        <span value="6" class="button number col-3">6</span>\r\n        <span value="MINUS" class="button special-symbols col-3">-</span>\r\n    </div>\r\n    <div class="calc-row">\r\n        <span value="1" class="button number col-3">1</span>\r\n        <span value="2" class="button number col-3">2</span>\r\n        <span value="3" class="button number col-3">3</span>\r\n        <span value="PLUS" class="button special-symbols col-3">+</span>\r\n    </div>\r\n    <div class="calc-row">\r\n        <span class="button disabled col-3"></span>\r\n        <span value="0" class="button number col-3">0</span>\r\n        <span value="dot" class="button number col-3">.</span>\r\n        <span value="EQ" class="button special-symbols col-3">=</span>\r\n    </div>\r\n</div>'},function(e,t,n){"use strict";n.r(t);n(0)},function(e,t,n){e.exports=n.p+"8f2881c9a7525fcb3311334a6cea750c.png"},function(e,t,n){var r=n(5);"string"==typeof r&&(r=[[e.i,r,""]]);var o={hmr:!0,transform:void 0};n(7)(r,o);r.locals&&(e.exports=r.locals)},function(e,t,n){(t=e.exports=n(6)(!1)).push([e.i,"@import url(https://fonts.googleapis.com/css?family=Roboto);",""]),t.push([e.i,".calc-container{\r\n    margin: 0px;\r\n    border: 0px;\r\n    max-width:300px;\r\n    display:flex;\r\n    flex-direction: column;\r\n    flex-wrap:wrap;\r\n    font-family: 'Roboto', sans-serif;\r\n    -webkit-box-shadow: 0px 2px 38px -3px rgba(0,0,0,0.75);\r\n    -moz-box-shadow: 0px 2px 38px -3px rgba(0,0,0,0.75);\r\n    box-shadow: 0px 2px 38px -3px rgba(0,0,0,0.75); \r\n    z-index:1001; \r\n}\r\n.text-box{\r\n    border:1px solid #E0E0E0;\r\n    background-color: #E0E0E0;\r\n    height:80px;\r\n    padding-right:5px;\r\n    text-align: right;\r\n}\r\n.total-expr{\r\n    font-size:15px;\r\n    /*line-height:40px;*/\r\n    position:relative;\r\n    top:20%;\r\n    display: block;\r\n}\r\n.current-number{\r\n    font-weight:bold;\r\n    font-size:30px;\r\n    position:relative;\r\n    top:20%;\r\n    /*line-height:40px;*/\r\n    display: block;\r\n}\r\n.calc-row{\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n\r\n.button{\r\n    min-width:50px;\r\n    min-height:40px;\r\n    border:1px solid #B8B8B8;\r\n    text-align: center;\r\n    justify-content: center;\r\n    font-size:20px;\r\n    line-height:50px;\r\n    cursor: pointer;\r\n}\r\n.disabled{\r\n    cursor:default;\r\n}\r\n.number{\r\n    font-weight: bold;\r\n}\r\n.number:hover{\r\n    /*background-color:#E0E0E0;*/\r\n    background-color:#EBEBEB;\r\n}\r\nspan.number:active{\r\n    background-color:#E0E0E0;\r\n    border:1px double #B8B8B8;\r\n}\r\nspan.button:not(.number):not(.disabled):active{\r\n    background-color:#00bfff;\r\n    color:white;\r\n    transition: 0.15s;\r\n}\r\nspan.button:not(.number):not(.disabled):not(:active):hover{\r\n    background-color:#0040ff;\r\n    color:white;\r\n}\r\n.special-symbols,\r\n.system\r\n{\r\n    font-size:16px;\r\n    background-color:#EBEBEB;\r\n}\r\n.col-3{\r\n    width:25%;\r\n}\r\n.col-4{\r\n    width:33%;\r\n}\r\n.col-12{\r\n    width:100%;\r\n}",""])},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var o=(s=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */"),a=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(a).concat([o]).join("\n")}var s;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},o=0;o<this.length;o++){var a=this[o][0];"number"==typeof a&&(r[a]=!0)}for(o=0;o<e.length;o++){var s=e[o];"number"==typeof s[0]&&r[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="("+s[2]+") and ("+n+")"),t.push(s))}},t}},function(e,t,n){var r,o,a={},s=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),l=function(e){var t={};return function(e){if(void 0===t[e]){var n=function(e){return document.querySelector(e)}.call(this,e);if(n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}}(),i=null,c=0,u=[],p=n(8);function d(e,t){for(var n=0;n<e.length;n++){var r=e[n],o=a[r.id];if(o){o.refs++;for(var s=0;s<o.parts.length;s++)o.parts[s](r.parts[s]);for(;s<r.parts.length;s++)o.parts.push(x(r.parts[s],t))}else{var l=[];for(s=0;s<r.parts.length;s++)l.push(x(r.parts[s],t));a[r.id]={id:r.id,refs:1,parts:l}}}}function f(e,t){for(var n=[],r={},o=0;o<e.length;o++){var a=e[o],s=t.base?a[0]+t.base:a[0],l={css:a[1],media:a[2],sourceMap:a[3]};r[s]?r[s].parts.push(l):n.push(r[s]={id:s,parts:[l]})}return n}function b(e,t){var n=l(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=u[u.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),u.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=l(e.insertInto+" "+e.insertAt.before);n.insertBefore(t,o)}}function m(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=u.indexOf(e);t>=0&&u.splice(t,1)}function v(e){var t=document.createElement("style");return e.attrs.type="text/css",h(t,e.attrs),b(e,t),t}function h(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function x(e,t){var n,r,o,a;if(t.transform&&e.css){if(!(a=t.transform(e.css)))return function(){};e.css=a}if(t.singleton){var s=c++;n=i||(i=v(t)),r=y.bind(null,n,s,!1),o=y.bind(null,n,s,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",h(t,e.attrs),b(e,t),t}(t),r=function(e,t,n){var r=n.css,o=n.sourceMap,a=void 0===t.convertToAbsoluteUrls&&o;(t.convertToAbsoluteUrls||a)&&(r=p(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var s=new Blob([r],{type:"text/css"}),l=e.href;e.href=URL.createObjectURL(s),l&&URL.revokeObjectURL(l)}.bind(null,n,t),o=function(){m(n),n.href&&URL.revokeObjectURL(n.href)}):(n=v(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),o=function(){m(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else o()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=s()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=f(e,t);return d(n,t),function(e){for(var r=[],o=0;o<n.length;o++){var s=n[o];(l=a[s.id]).refs--,r.push(l)}e&&d(f(e,t),t);for(o=0;o<r.length;o++){var l;if(0===(l=r[o]).refs){for(var i=0;i<l.parts.length;i++)l.parts[i]();delete a[l.id]}}}};var _,g=(_=[],function(e,t){return _[e]=t,_.filter(Boolean).join("\n")});function y(e,t,n,r){var o=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=g(t,o);else{var a=document.createTextNode(o),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(a,s[t]):e.appendChild(a)}}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var o,a=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(a)?e:(o=0===a.indexOf("//")?a:0===a.indexOf("/")?n+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,